#!/usr/bin/env python
import getpass
import os
import sys
import time
import re
import socket 

#Function to define user account
def write_sbatch_account(sub_info, sh_file):
    """
    Writes the appropriate SBATCH account line based on the 'account' key in sub_info.

    Parameters:
    sub_info (dict): A dictionary containing submission info, including the 'account' key.
    sh_file (file object): The open file object to write the SBATCH line to.
    """
    
    sh_file.write('#!/bin/bash\n\n')
    
    if sub_info['account'] == 'rrg':
        sh_file.write(f'#SBATCH --account=rrg-shopkins-ab\n')
    elif sub_info['account'] == 'derek':
        sh_file.write(f'#SBATCH --account=def-schipper\n')
    else:
        sh_file.write(f'#SBATCH --account=def-shopkins\n')

#Function to check if you are on a DRAC/Compute canada cluster. Returns Tue is you are and false if you are not. 
def DRAC_cluster_check(cluster_name):
    
    #dictionary for store names and pseudonyms for DRAC clusters
    cluster_names = {
        'narval' : ['narval', 'calcul', 'quebec'], #Server Name: narval3.narval.calcul.quebec
        'graham' : ['gra', 'login'], #Server Name: gra-login2
        'cedar' : ['computecanada', 'cedar'], #Server Name: cedar1.int.cedar.computecanada.ca
        'beluga' : ['beluga', 'calcul', 'quebec'], #Server name: beluga4.int.ets1.calculquebec.ca
        'niagara' : ['compute', 'canada', 'niagara']
    }

    for pseudonyms in cluster_names.values():
        
        #Iterate over dict entries to see if the cluster name. If match, return true. Otherwise return false
        if any(pseudo in cluster_name for pseudo in pseudonyms):
            return True 
        
    return False #only return false if no matches are found
        
#Function to submit a job file
def submit_file(directory, file_name, sub_info):

    #Determine if running on Compute Canada / DRAC cluster
    cluster_name = str(socket.gethostname()).lower() #get name of cluster that you are connected to and ensure it is lowercase for matching w/ dict in DRAC_cluster_check
    CC_cluster = DRAC_cluster_check(cluster_name) #compute canada cluster

    timestamp = time.strftime('%Y-%m-%d_%H-%M-%S')
    sh_file_path = os.path.join(directory, f'{file_name.split(".")[0]}_{timestamp}.sh')

    #define list of files with the same basename for copying to SLURM TMP_dir - avoiding substring matching because files can be File_1 and File_10, etc. 
    #info on SLURM tempdir can be found at https://docs.alliancecan.ca/wiki/Using_node-local_storage
    base_name = file_name.rsplit('.', 1)[0]
    pattern = re.compile(f"^{re.escape(base_name)}(?:_|\..*)?$")
    files_to_copy = [f for f in os.listdir(os.getcwd()) if pattern.match(f)]
    
    #write SLURM account info
    with open(sh_file_path, 'w') as sh_file:
        write_sbatch_account(sub_info, sh_file)

        #write the runtime and CPU information to the .sh file
        sh_file.writelines([
            f'#SBATCH --time={sub_info["time"]}\n',
            '#SBATCH -N 1\n',
            f'#SBATCH --ntasks={sub_info["ncores"]}\n',
            f'#SBATCH --mem-per-cpu={sub_info["memory"]}\n',
            f'#SBATCH --error={base_name}.err\n\n',   
            ])    

        #defining this to its own variable for later convienence
        program = sub_info['program']

        #######   Gaussian  #######
        if sub_info['program'] == 'g16':
            sh_file.write(f'#SBATCH --output={file_name.rsplit(".", 1)[0]}.log\n\n')
            
            #special syntax for SLURM on compute canada
            if CC_cluster:
                sh_file.write('module load gaussian/g16.c01\n')

            sh_file.write(f'G16 {file_name}\n') #syntax difference between G16 and g16 - since .rwf files can get very large very fast, its best to not save those unless absolutely necessary. g16 saves by default, G16 does not 

        #######   Python  #######
        elif sub_info['program'] == 'python':
            if CC_cluster:
                sh_file.write('\nmodule load python/3.10\n')

            sh_file.write(f'{program} {file_name} > {file_name.replace(".py", "")}.out\n')
        
        #######   ORCA  #######
        elif 'orca' in sub_info['program']:
            
            sh_file.write(f'#SBATCH --output={file_name.rsplit(".", 1)[0]}.out\n\n')

            # compute canada specific stuffs
            if CC_cluster:
                
                #ORCA 5.0.4 on Sharcwebz - need to do "in" searches because of the possibility that the user wants to do NBO jobs
                if 'orca5' in sub_info['program'].lower():
                    sh_file.write('module load StdEnv/2020 gcc/10.3.0 openmpi/4.1.1 orca/5.0.4\n\n')

                #ORCA 6.0.0 on Sharcwebz - need to do "in" searches because of the possibility that the user wants to do NBO jobs
                elif 'orca6' in sub_info['program'].lower():
                    sh_file.write('module load StdEnv/2023 gcc/12.3 openmpi/4.1.5 orca/6.0.0\n\n')
                
                else: 
                    print(f'Unrecognized ORCA program: {sub_info["program"]}.')
                    return None

                #Special call for NBO on Sharcwebz
                if 'nbo' in sub_info['program'].lower():
                    sh_file.writelines([
                        'module load gaussian/g16.c01\n',
                        r'export GENEXE=`which gennbo.i4.exe`',
                        '\n',                    
                        r'export NBOEXE=`which nbo7.i4.exe`',
                        '\n\n',
                    ])               

                #if using a temp dir, once the calc finishes, copy all files from it
                if sub_info['tmp_dir'].lower() == 'true':

                    # Set up a trap to copy files back if the job is interrupted - directories will not be copied
                    sh_file.write('# Set up a trap to copy files back if the job is interrupted - directories will not be copied\n')
                    sh_file.write(f'trap "find ${{SLURM_TMPDIR}} -type f -exec cp {{}} ${{SLURM_SUBMIT_DIR}}/ \\;" EXIT\n\n')   

                    # Update the copy file list to prevent copying any existing ORCA outputs to the SLURM tempdir. Otherwise, once the calc finishes, it will overwrite the .out file being written to your local directory :(
                    files_to_copy_orca = [f for f in files_to_copy if not f.endswith('.out') or f.endswith('.sh')]
                
                    #copy all files w/ the same basename has the input
                    sh_file.write(f'# Copying all files related to the file and all xyz files (if they exist) to the SLURM temp dir, then change to the temp dir\n')
                    
                    for file in files_to_copy_orca:
                        sh_file.write(f'cp ${{SLURM_SUBMIT_DIR}}/{file} ${{SLURM_TMPDIR}}/\n')
                    
                    sh_file.write('\nif compgen -G "${SLURM_SUBMIT_DIR}/*.xyz" > /dev/null; then\n')
                    sh_file.write('    cp ${SLURM_SUBMIT_DIR}/*.xyz ${SLURM_TMPDIR}/\n')
                    sh_file.write('fi\n')
                    sh_file.write('cd ${SLURM_TMPDIR}\n\n') 

                    #Run ORCA and get its PID
                    sh_file.write('# Run ORCA and get its PID\n')
                    sh_file.write(f'$EBROOTORCA/orca {file_name}\n')
                    sh_file.write('MAIN_PID=$!\n\n')

                    # Start a background process to copy files every 2 hours
                    sh_file.writelines([
                        '# Start a background process to copy files every 2 hours\n',
                        '(\n',
                        '    # Monitor the main job process and periodically copy files\n',
                        '    while kill -0 $MAIN_PID 2> /dev/null; do\n',
                        '        # Wait for 2 hours before attempting to copy files\n',
                        '        sleep 2h\n',
                        '        # Log the start of the rsync operation with a timestamp\n',
                        f'        echo "$(date): Starting rsync operation" >> ${{SLURM_SUBMIT_DIR}}/copy_log.txt\n',
                        '        # Use find to select files without "tmp" in their name and rsync to copy them\n',
                        f'        find ${{SLURM_TMPDIR}} -type f ! -name \'*tmp*\' -exec rsync -av --no-links {{}} ${{SLURM_SUBMIT_DIR}}/ \\; >> ${{SLURM_SUBMIT_DIR}}/copy_log.txt 2>&1\n',
                        '        # Check if rsync was successful and log the result\n',
                        '        if [ $? -eq 0 ]; then\n',
                        f'            echo "$(date): rsync operation completed successfully" >> ${{SLURM_SUBMIT_DIR}}/copy_log.txt\n',
                        '        else\n',
                        f'            echo "$(date): rsync operation failed" >> ${{SLURM_SUBMIT_DIR}}/copy_log.txt\n',
                        '        fi\n',
                        '    done\n',
                        ')&\n\n'
                    ])

                    # Wait for the main job to complete
                    sh_file.write('# When the main job completes, copy all output files back to the submit directory\n')
                    sh_file.write('wait $MAIN_PID\n')
                    sh_file.write(f'rsync -av ${{SLURM_TMPDIR}}/* "${{SLURM_SUBMIT_DIR}}/"\n\n')
                    
                else:
                    #write the commend to run orca on the defined input file without temp dir    
                    sh_file.write(f'$EBROOTORCA/orca {file_name}\n')
            
            #if not ruunning on Sharcnet, then /tmp directories and ORCA versions might not matter. Just call ORCA :)
            else:
                sh_file.write(f'/mnt/Scratch/programs/orca/orca {file_name}\n\n')

        #######   MobCal-MPI  #######
        elif sub_info['program'] == 'mobcal':
            sh_file.write(f'\nsrun MobCal_MPI_203.exe {file_name} {file_name.rsplit(".", 1)[0]}.mout\n\n') #takes inputfile and outputfile names as command line arguements

        #######   CREST   #######
        #Note that this submission script is specific to +1 cations with a gas phase model. You will need to change the line below if you want it to do other things. Adding CREST specific terms to subSLURM would be too tedious otherwise.
        elif sub_info['program'] == 'crest':
            sh_file.write(f'\nsrun crest {file_name} --gfn2 -T {sub_info["ncores"]} --chrg 1\n\n') 

        #######   CENSO  #######
        elif sub_info['program'] == 'censo':
            
            #censo needs ORCA
            if CC_cluster: 
                sh_file.write('\nmodule load StdEnv/2023 gcc/12.3 openmpi/4.1.5 orca/6.0.0\n\n',)

            sh_file.write(f'srun censo -inp {file_name} > {file_name.rsplit(".", 1)[0]}_censo.out\n\n') #takes inputfile as command line arguements. censo settings read in from .censorc. See https://github.com/grimme-lab/CENSO
            
	#Submit the job
    submit_command = f'sbatch {sh_file_path}'
    
    try:
        os.system(submit_command)
        print(f'Submitted {os.path.basename(file_name)} succesfully.')
    
    except Exception as e:
        print(f'An unexcepted error occured when submitting {os.path.basename(file_name)}: {e}')
        return

#Main execution logic for handling command-line arguments
def main():
    
    args = [arg.lower() for arg in sys.argv] #get command line arguements

    #filename or all (12 or 14 is specified because the -temp arguement is optional)
    if len(args) not in {12, 14}:
        print('An invalid number of arguments were given.')
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]\nfor submission of multiple files')
        return

    #get arguements from command line input independent of inut order
    sub_info = {
        'file_name': '',
        'ncores': '',
        'memory': '',
        'time': '',
        'program': '',
        'account': '',
        'tmp_dir': 'true',
    }
    
    sub_info['file_name'] = args[1] #filename is the first arguement after subSLURM

    for i in range(2, len(args), 2):  #Start from index 3 (to skip 'submit' and 'file_name') and loop in increments of two
        if i+1 < len(args):  #Ensure there's a value following the option -letter option
            if args[i] == '-n':
                sub_info['ncores'] = args[i + 1]
            elif args[i] == '-m':
                sub_info['memory'] = args[i + 1]
            elif args[i] == '-t':
                sub_info['time'] = args[i + 1]
            elif args[i] == '-p':
                sub_info['program'] = args[i + 1]
            elif args[i] == '-a':
                sub_info['account'] = args[i + 1]
            elif args[i] == '-temp':
                sub_info['tmp_dir'] = args[i + 1]

    #### ARGUEMENT CHECK ####
    if any(value == '' for value in sub_info.values()):
        #List the missing items for the user
        missing_items = [key for key, value in sub_info.items() if value == '']
        print(f"Arguments are missing from the input: {', '.join(missing_items)}\n")
        print('Usage (items in square parenthesis are optional):')
        print('  subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]')
        print('    for single file submissions, or:')
        print('  subSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]')
        print('    for submission of multiple files')
        return
   
    #Function to check if a string represents an integer
    def is_integer(s):
        try:
            int(s)
            return True
        except ValueError:
            return False

    #### NCORES CHECK ####
    if not is_integer(sub_info['ncores']):
        print(f'The number of cores provided is not an integer: {sub_info["ncores"]}.')
        return
    
    #### MEMORY CHECK ####
    mem_str = sub_info['memory']

    def check_memory(mem_str):
        #Check if the string ends with 'mb' or 'gb'
        if mem_str.lower().endswith('mb') or mem_str.lower().endswith('gb'):
            if mem_str[:-2].isdigit():
                return mem_str
            else:
                print(f'The memory specified needs to be an integer followed by "mb" or "gb". You have provided: {mem_str}')
                return

        #Check if the string ends with 'm' or 'g'
        elif mem_str.lower().endswith('m') or mem_str.lower().endswith('g'):
            #Ensure that all characters before 'm' or 'g' are numeric
            if mem_str[:-1].isdigit():
                return mem_str + 'b'
            else:
                print(f'The memory specified needs to be an integer followed by "m" or "g". You have provided: {mem_str}')
                return
        
        else:
            print(f'The memory specified needs to be an integer followed by "mb", "m", "gb", or "g". You have provided: {mem_str}')
            return

    #update dict entry w/ corrected memory        
    sub_info['memory'] = check_memory(mem_str)
        
    #### WALTIME CHECK ####
    def adjust_time_format(time_str):
        
        #Regex pattern to parse alphanumeric time strings in any order of the form 1d4h300m20s and 4h3d80s1m
        pattern = re.compile(r'(?:(?P<days>\d+)d|(?P<hours>\d+)h|(?P<minutes>\d+)m|(?P<seconds>\d+)s)')

        def parse_alphanumeric_time_string(time_string):
            time_dict = {'days': 0, 'hours': 0, 'minutes': 0, 'seconds': 0}
            matches = pattern.findall(time_string)
            
            #dummy dict to check for suplicate delimiters
            seen = {'days': False, 'hours': False, 'minutes': False, 'seconds': False}
            
            for match in matches:
                for key, value in zip(time_dict.keys(), match):
                    if value:
                        #check for duplicate delimiters
                        if seen[key]:
                            print(f'Error: Duplicate delimiter detected for {key} in time string: {time_string}')
                            return None
                        seen[key] = True
                        time_dict[key] = int(value)
            return time_dict

        try:
            #Check if the time string contains any of the required delimiters - throw an error if it doesnt
            if not any(delimiter in time_str for delimiter in ['d', 'h', 'm', 's']):
                print(f'The time string provided ({time_str}) is missing d, h, m, and s delimiters. Use the format ##d##h##m##s.')
                return False
            
            time_dict = parse_alphanumeric_time_string(time_str)
            
            if time_dict is None:
                return False
                
            #Format the time string for SLURM as 'dd-hh:mm:ss'
            return f'{str(time_dict["days"]).zfill(2)}-{str(time_dict["hours"]).zfill(2)}:{str(time_dict["minutes"]).zfill(2)}:{str(time_dict["seconds"]).zfill(2)}'
                    
        except Exception as e:
            print(f'An exception occurred while parsing the time string: {e}.')
            return False

    #update dict entry w/ corrected memory    
    time_str = sub_info['time']    
    sub_info['time'] = adjust_time_format(time_str)

    #exit code if time stirng was not parsed correctly 
    if not sub_info['time']:
        return
    
    #### Get list of files to prepare .sh fiels for ####
    job_files = [] #list to store files to submit via SLURM
    extension_map = {'g16': '.gjf', 
        'g16c': '.gjf', 
        'python': '.py', 
        'orca5': '.inp', 
        'orca5nbo': '.inp', 
        'orca6': '.inp', 
        'orca6nbo': '.inp', 
        'mobcal': '.mfj', 
        'crest': '.xyz',
        'censo': 'xyz'} #dictionary of file extensions based on program arguement input

    #### METHOD CHECK ####
    if sub_info['program'] not in extension_map:
        print(f"The program argument (-p) provided: {sub_info['program']} is not an accepted value. It must be one of {', '.join(extension_map.keys())}.")
        return
    
    #workflow for submitting all jobs with the matching extension in the cwd
    if sub_info['file_name'] == 'all':
        
        job_extension = extension_map.get(sub_info['program'], None)
        job_files = [f for f in os.listdir(os.getcwd()) if f.lower().endswith(job_extension)]
    
    #workflow for submitting a single file provided as the second argument
    elif sub_info['file_name'].endswith(extension_map[sub_info['program']]):
        
        if os.path.isfile(os.path.join(os.getcwd(), sys.argv[1])): #because I lower the arguements at the start of main(), I call using sys.argv to get the right case of the filename
            job_files.append(sys.argv[1])
        
        else:
            print(f'{sys.argv[1]} does not exist in {os.getcwd()}.')
            return        
    else:
        print(f'{sys.argv[1]} is not the right file type for a calculating in {sub_info["program"]}.')
        return

    #make .sh files for all appropriate files in the current directory where files are located
    for job_file in job_files:
        directory = os.path.dirname(job_file)
        submit_file(directory, job_file, sub_info)

if __name__ == '__main__':
    main()
