#!/usr/bin/env python
import getpass
import os
import sys
import time
import re
import socket 

#Function to define user account
def write_sbatch_account(sub_info, sh_file):
    """
    Writes the appropriate SBATCH account line based on the 'account' key in sub_info.

    Parameters:
    sub_info (dict): A dictionary containing submission info, including the 'account' key.
    sh_file (file object): The open file object to write the SBATCH line to.
    """
    
    sh_file.write('#!/bin/bash\n\n')
    
    if sub_info['account'] == 'rrg':
        sh_file.write(f'#SBATCH --account=rrg-shopkins-ab\n')
    elif sub_info['account'] == 'derek':
        sh_file.write(f'#SBATCH --account=def-schipper\n')
    else:
        sh_file.write(f'#SBATCH --account=def-shopkins\n')

#Function to submit a job file
def submit_file(directory, file_name, sub_info):
    
    #Determine the user's scratch directory and set up sh_files directory
    username = getpass.getuser()

    #Determine if running on Sharcnet
    Sharcnet = os.path.exists(f'/scratch/{username}')

    timestamp = time.strftime('%Y-%m-%d_%H-%M-%S')
    sh_file_path = os.path.join(directory, f'{file_name.split(".")[0]}_{timestamp}.sh')

    #define list of files with the same basename for copying to SLURM TMP_dir - avoiding substring matching because files can be File_1 and File_10, etc. 
    #info on SLURM tempdir can be found at https://docs.alliancecan.ca/wiki/Using_node-local_storage
    base_name = file_name.rsplit('.', 1)[0]
    pattern = re.compile(f"^{re.escape(base_name)}(?:_|\..*)?$")
    files_to_copy = [f for f in os.listdir(os.getcwd()) if pattern.match(f)]
    
    #write SLURM account info
    with open(sh_file_path, 'w') as sh_file:
        write_sbatch_account(sub_info, sh_file)

        #Need to do some special threading stuff for censo
        if sub_info['program'] == 'censo':

            def adjust_ncores(sub_info):
                '''
                Adjust the 'ncores' entry to ensure it's divisible by 4 and capped by the server limits. Only for censo calcs

                Graham: 32 cores per node
                Narval: 64 cores per node

                Parameters:
                sub_info (dict): Dictionary containing submission information, including 'ncores' and 'server'.
                '''
                
                #   Get name of CC clusters
                server_name = socket.gethostname()

                #   Get ncores from dict as int
                ncores = int(sub_info.get("ncores"))

                #   Ensure ncores is divisible by 4
                if ncores % 4 != 0:
                    ncores_mod = (ncores // 4) * 4  #   Round down to the nearest multiple of 4

                #   Apply server-specific limits
                if 'narval' in server_name:
                    ncores_mod = min(ncores, 64)  # Cap at 64 cores for Narval

                else:
                    ncores_mod = min(ncores, 32)  # Failsafe cap at 32 cores - for the rest of CC clusters

                return ncores_mod

            #   Adjust the ncores value before writing
            ncores_mod = adjust_ncores(sub_info)

            #   Write info to sh file for censo
            sh_file.writelines([
                '--nodes-N 1\n',
                f'--ntasks={ncores_mod}\n',
                '--cpus-per-task=4\n',
                f'--mem-per-cpu={sub_info["memory"]}\n',
                f'--time={sub_info["time"]}\n',
                '\n',
                'module load StdEnv/2023 gcc/12.3 openmpi/4.1.5 orca/6.0.0\n',
                '\n',
                f'srun --cpus-per-task=$SLURM_CPUS_PER_TASK censo -inp {file_name} > {file_name.rsplit(".", 1)[0]}_censo.out\n\n' #takes inputfile as command line arguements. censo settings read in from .censorc. See https://github.com/grimme-lab/CENSO
                ])        

        else:

            #write the runtime and CPU information to the .sh file
            sh_file.writelines([
                f'#SBATCH --time={sub_info["time"]}\n',
                '#SBATCH -N 1\n',
                f'#SBATCH --ntasks={sub_info["ncores"]}\n',
                f'#SBATCH --mem-per-cpu={sub_info["memory"]}\n',
                ])        

            #defining this to its own variable for later convienence
            program = sub_info['program']

        #######   Gaussian  #######
            if sub_info['program'] == 'g16':
                sh_file.write(f'#SBATCH --output={file_name.rsplit(".", 1)[0]}.log\n\n')
                
                #special syntax for SLURM on compute canada
                if Sharcnet:
                    sh_file.write('module load gaussian/g16.c01\n')

                sh_file.write(f'G16 {file_name}\n') #syntax difference between G16 and g16 - since .rwf files can get very large very fast, its best to not save those unless absolutely necessary. g16 saves by default, G16 does not 

            #######   Python  #######
            elif sub_info['program'] == 'python':
                if Sharcnet:
                    sh_file.write('\nmodule load python/3.10\n')

                sh_file.write(f'{program} {file_name} > {file_name.replace(".py", "")}.out\n')
            
            #######   ORCA  #######
            elif 'orca' in sub_info['program']:
                sh_file.write(f'#SBATCH --output={file_name.rsplit(".", 1)[0]}.out\n\n')

                if Sharcnet:
                    
                    #ORCA 5.0.4 on Sharcwebz
                    if sub_info['program'].lower() == 'orca5':
                        sh_file.write('module load StdEnv/2020 gcc/10.3.0 openmpi/4.1.1 orca/5.0.4\n\n')

                    #ORCA 6.0.0 on Sharcwebz
                    elif sub_info['program'].lower() == 'orca6': 
                        sh_file.write('module load StdEnv/2023 gcc/12.3 openmpi/4.1.5 orca/6.0.0\n\n',)
                    
                    #Special call for NBO in ORCA 6.0.0 on Sharcwebz
                    elif sub_info['program'].lower() == 'orca6nbo': 

                        sh_file.writelines([
                            'module load StdEnv/2023 gcc/12.3 openmpi/4.1.5 orca/6.0.0\n',
                            'module load gaussian/g16.c01\n',
                            '\n',

                            r'export GENEXE=`which gennbo.i4.exe`',
                            '\n',                    
                            r'export NBOEXE=`which nbo7.i4.exe`',
                            '\n\n',
                        ])
                    
                    else: 
                        print(f'Unrecognized ORCA program: {sub_info["program"]}.')
                        return None

                    #special temporary directory stuff unique to DRAC clusters. Foir info, see https://docs.alliancecan.ca/wiki/Using_node-local_storage
                    if sub_info['tmp_dir'].lower() == 'true':
                        
                        # Update the copy file list to prevent copying any existing ORCA outputs to the SLURM tempdir. Otherwise, once the calc finishes, it will overwrite the .out file being written to your local directory :(
                        files_to_copy_orca = [f for f in files_to_copy if not f.endswith('.out') or f.endswith('.sh')]
                        
                        #copy all files w/ the same basename has the input
                        for file in files_to_copy_orca:
                            sh_file.write(f'cp ${{SLURM_SUBMIT_DIR}}/{file} ${{SLURM_TMPDIR}}/\n')
                        
                        #change to temp dir so that ORCA runs out of it
                        sh_file.write('cd ${SLURM_TMPDIR}\n\n') 

                    #write the commend to run orca on the defined input file    
                    sh_file.write(f'$EBROOTORCA/orca {file_name}\n')

                    #if using a temp dir, once the calc finishes, copy all files from it
                    if sub_info['tmp_dir'].lower() == 'true':
                        
                        sh_file.write(f'cp ${{SLURM_TMPDIR}}/* ${{SLURM_SUBMIT_DIR}}/\n\n')
                
                #if not ruunning on Sharcnet, then /tmp directories and ORCA versions might not matter. Just call ORCA :)
                else:
                    sh_file.write(f'/mnt/Scratch/programs/orca/orca {file_name}\n\n')

            #######   MobCal-MPI  #######
            elif sub_info['program'] == 'mobcal':
                sh_file.write(f'\nsrun MobCal_MPI_203.exe {file_name} {file_name.rsplit(".", 1)[0]}.mout\n\n') #takes inputfile and outputfile names as command line arguements

            #######   CREST   #######
            #Note that this submission script is specific to +1 cations with a gas phase model. You will need to change the line below if you want it to do other things. Adding CREST specific terms to subSLURM would be too tedious otherwise.
            elif sub_info['program'] == 'crest':
                sh_file.write(f'\nsrun crest {file_name} --gfn2 -T {sub_info["ncores"]} --chrg 1\n\n') 
            
            '''
            #######   CENSO  #######
            elif sub_info['program'] == 'censo':
                
                #censo needs ORCA
                if Sharcnet: 
                    sh_file.write('\nmodule load StdEnv/2023 gcc/12.3 openmpi/4.1.5 orca/6.0.0\n\n',)

                sh_file.write(f'srun censo -inp {file_name} > {file_name.rsplit(".", 1)[0]}_censo.out\n\n') #takes inputfile as command line arguements. censo settings read in from .censorc. See https://github.com/grimme-lab/CENSO
            '''
	#Submit the job
    submit_command = f'sbatch {sh_file_path}'
    
    try:
        os.system(submit_command)
        print(f'Submitted {os.path.basename(file_name)} succesfully.')
    
    except Exception as e:
        print(f'An unexcepted error occured when submitting {os.path.basename(file_name)}: {e}')

#Main execution logic for handling command-line arguments
def main():
    
    args = [arg.lower() for arg in sys.argv] #get command line arguements

    #filename or all (12 or 14 is specified because the -temp arguement is optional)
    if len(args) not in {12, 14}:
        print('An invalid number of arguments were given.')
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]\nfor submission of multiple files')
        return

    #get arguements from command line input independent of inut order
    sub_info = {
        'file_name': '',
        'ncores': '',
        'memory': '',
        'time': '',
        'program': '',
        'account': '',
        'tmp_dir': 'true',
    }
    
    sub_info['file_name'] = args[1] #filename is the first arguement after subSLURM

    for i in range(2, len(args), 2):  #Start from index 3 (to skip 'submit' and 'file_name') and loop in increments of two
        if i+1 < len(args):  #Ensure there's a value following the option -letter option
            if args[i] == '-n':
                sub_info['ncores'] = args[i + 1]
            elif args[i] == '-m':
                sub_info['memory'] = args[i + 1]
            elif args[i] == '-t':
                sub_info['time'] = args[i + 1]
            elif args[i] == '-p':
                sub_info['program'] = args[i + 1]
            elif args[i] == '-a':
                sub_info['account'] = args[i + 1]
            elif args[i] == '-temp':
                sub_info['tmp_dir'] = args[i + 1]

    #### ARGUEMENT CHECK ####
    if any(value == '' for value in sub_info.values()):
        #List the missing items for the user
        missing_items = [key for key, value in sub_info.items() if value == '']
        print(f"Arguments are missing from the input: {', '.join(missing_items)}\n")
        print('Usage (items in square parenthesis are optional):')
        print('  subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]')
        print('    for single file submissions, or:')
        print('  subSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg [-temp true/false]')
        print('    for submission of multiple files')
        return
   
    #Function to check if a string represents an integer
    def is_integer(s):
        try:
            int(s)
            return True
        except ValueError:
            return False

    #### NCORES CHECK ####
    if not is_integer(sub_info['ncores']):
        print(f'The number of cores provided is not an integer: {sub_info["ncores"]}.')
        return
    
    #### MEMORY CHECK ####
    mem_str = sub_info['memory']

    def check_memory(mem_str):
        #Check if the string ends with 'mb' or 'gb'
        if mem_str.lower().endswith('mb') or mem_str.lower().endswith('gb'):
            if mem_str[:-2].isdigit():
                return mem_str
            else:
                print(f'The memory specified needs to be an integer followed by "mb" or "gb". You have provided: {mem_str}')
                return

        #Check if the string ends with 'm' or 'g'
        elif mem_str.lower().endswith('m') or mem_str.lower().endswith('g'):
            #Ensure that all characters before 'm' or 'g' are numeric
            if mem_str[:-1].isdigit():
                return mem_str + 'b'
            else:
                print(f'The memory specified needs to be an integer followed by "m" or "g". You have provided: {mem_str}')
                return
        
        else:
            print(f'The memory specified needs to be an integer followed by "mb", "m", "gb", or "g". You have provided: {mem_str}')
            return

    #update dict entry w/ corrected memory        
    sub_info['memory'] = check_memory(mem_str)
        
    #### WALTIME CHECK ####
    def adjust_time_format(time_str):
        
        #Regex pattern to parse alphanumeric time strings in any order of the form 1d4h300m20s and 4h3d80s1m
        pattern = re.compile(r'(?:(?P<days>\d+)d|(?P<hours>\d+)h|(?P<minutes>\d+)m|(?P<seconds>\d+)s)')

        def parse_alphanumeric_time_string(time_string):
            time_dict = {'days': 0, 'hours': 0, 'minutes': 0, 'seconds': 0}
            matches = pattern.findall(time_string)
            
            #dummy dict to check for suplicate delimiters
            seen = {'days': False, 'hours': False, 'minutes': False, 'seconds': False}
            
            for match in matches:
                for key, value in zip(time_dict.keys(), match):
                    if value:
                        #check for duplicate delimiters
                        if seen[key]:
                            print(f'Error: Duplicate delimiter detected for {key} in time string: {time_string}')
                            return None
                        seen[key] = True
                        time_dict[key] = int(value)
            return time_dict

        try:
            #Check if the time string contains any of the required delimiters - throw an error if it doesnt
            if not any(delimiter in time_str for delimiter in ['d', 'h', 'm', 's']):
                print(f'The time string provided ({time_str}) is missing d, h, m, and s delimiters. Use the format ##d##h##m##s.')
                return False
            
            time_dict = parse_alphanumeric_time_string(time_str)
            
            if time_dict is None:
                return False
                
            #Format the time string for SLURM as 'dd-hh:mm:ss'
            return f'{str(time_dict["days"]).zfill(2)}-{str(time_dict["hours"]).zfill(2)}:{str(time_dict["minutes"]).zfill(2)}:{str(time_dict["seconds"]).zfill(2)}'
                    
        except Exception as e:
            print(f'An exception occurred while parsing the time string: {e}.')
            return False

    #update dict entry w/ corrected memory    
    time_str = sub_info['time']    
    sub_info['time'] = adjust_time_format(time_str)

    #exit code if time stirng was not parsed correctly 
    if not sub_info['time']:
        return
    
    #### Get list of files to prepare .sh fiels for ####
    job_files = [] #list to store files to submit via SLURM
    extension_map = {'g16': '.gjf', 
        'g16c': '.gjf', 
        'python': '.py', 
        'orca5': '.inp', 
        'orca6': '.inp', 
        'orca6nbo': '.inp', 
        'mobcal': '.mfj', 
        'crest': '.xyz',
        'censo': 'xyz'} #dictionary of file extensions based on program arguement input

    #### METHOD CHECK ####
    if sub_info['program'] not in extension_map:
        print(f"The program argument (-p) provided: {sub_info['program']} is not an accepted value. It must be one of {', '.join(extension_map.keys())}.")
        return
    
    #workflow for submitting all jobs with the matching extension in the cwd
    if sub_info['file_name'] == 'all':
        
        job_extension = extension_map.get(sub_info['program'], None)
        job_files = [f for f in os.listdir(os.getcwd()) if f.lower().endswith(job_extension)]
    
    #workflow for submitting a single file provided as the second argument
    elif sub_info['file_name'].endswith(extension_map[sub_info['program']]):
        
        if os.path.isfile(os.path.join(os.getcwd(), sys.argv[1])): #because I lower the arguements at the start of main(), I call using sys.argv to get the right case of the filename
            job_files.append(sys.argv[1])
        
        else:
            print(f'{sys.argv[1]} does not exist in {os.getcwd()}.')
            return        
    else:
        print(f'{sys.argv[1]} is not the right file type for a calculating in {sub_info["program"]}.')
        return

    #make .sh files for all appropriate files in the current directory where files are located
    for job_file in job_files:
        directory = os.path.dirname(job_file)
        submit_file(directory, job_file, sub_info)

if __name__ == '__main__':
    main()
