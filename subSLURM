#!/usr/bin/env python3.10
import getpass
import os
import sys
import time
import re

#Function to submit a job file
def submit_file(directory, file_name, sub_info):
    
    #Determine the user's scratch directory and set up sh_files directory
    username = getpass.getuser()

    #Determine if running on Sharcnet
    Sharcnet = os.path.exists(f'/scratch/{username}')

    timestamp = str(int(time.time()))
    sh_file_path = os.path.join(directory, f'{file_name.split(".")[0]}_{timestamp}.sh')

    with open(sh_file_path, 'w') as sh_file:
        sh_file.write('#!/bin/bash\n')
        
        #!!!!!!!!!!!!!!!!!!!!!!!!!
        #This is where you define your compute canada account. If you are another group using this code, you will need to change this to your groups access credentials!
        if sub_info['account'] == 'rrg':
            sh_file.write(f'#SBATCH --account=rrg-shopkins-ab\n')
        else:
            sh_file.write(f'#SBATCH --account=def-shopkins\n')
        #!!!!!!!!!!!!!!!!!!!!!!!!!
        
        #write the runtime to the .sh file
        sh_file.write(f'#SBATCH --time={sub_info["time"]}\n\n')
        program = sub_info['program']
        
        #Gaussian
        if sub_info['program'] == 'g16':
            sh_file.writelines([
                '#SBATCH -N 1\n',
                f'#SBATCH --ntasks={sub_info["ncores"]}\n',
                f'#SBATCH --mem-per-cpu={sub_info["memory"]}\n',
                f'#SBATCH --output={file_name[:-4]}.log\n',
                '\n'
            ])
            
            #special syntax for SLURM on compute canada
            if Sharcnet:
                sh_file.write('module load gaussian/g16.c01\n')

            sh_file.write(f'G16 {file_name}\n') #syntax difference between G16 and g16 - since .rwf files can get very large very fast, its best to not save those unless absolutely necessary. g16 saves by default, G16 does not 

        #Python
        elif sub_info['program'] == 'python':
            sh_file.writelines([
                '#SBATCH -N 1\n',
                f'#SBATCH --ntasks={sub_info["ncores"]}\n',
                f'#SBATCH --mem-per-cpu={sub_info["memory"]}\n',
                '\n'
            ])
            
            #special syntax for SLURM on compute canada
            if Sharcnet:
                sh_file.write('module load python/3.10.2\n\n')

            sh_file.write(f'{program} {file_name} > {file_name.replace(".py", "")}.out\n')
        
        #ORCA
        elif sub_info['program'] == 'orca':
            sh_file.writelines([
                '#SBATCH -N 1\n',
                f'#SBATCH --ntasks={sub_info["ncores"]}\n',
                f'#SBATCH --mem-per-cpu={sub_info["memory"]}\n',
                f'#SBATCH --output={file_name[:-4]}.out\n',
                '\n'
            ])
            if Sharcnet:
                sh_file.writelines([
                    'module load StdEnv/2020 gcc/10.3.0 openmpi/4.1.1\n',
                    'module load orca/5.0.4\n',
                    f'cp ${{SLURM_SUBMIT_DIR}}/{file_name} ${{SLURM_TMPDIR}}/\n',
                    f'if [ -f "${{SLURM_SUBMIT_DIR}}/{file_name[:-4]}.gbw" ]; then cp "${{SLURM_SUBMIT_DIR}}/{file_name[:-4]}.gbw" ${{SLURM_TMPDIR}}/; fi\n', #copy any .gbw files (if they exist) - useful for doing MO calcs and speeding up optimizations using previous MO files
                    'cd ${SLURM_TMPDIR}\n',
                    '\n'
                ])
            
            sh_file.write(f'$EBROOTORCA/orca {file_name}\n\n')
            sh_file.write(f'cp ${{SLURM_TMPDIR}}/{file_name[:-4]}* ${{SLURM_SUBMIT_DIR}}/\n')
        
    #Submit the job
    submit_command = f'sbatch {sh_file_path}'
    print(submit_command)
    os.system(submit_command)

#Main execution logic for handling command-line arguments
def main():
    
    args = [arg.lower() for arg in sys.argv] #get command line arguements

    #filename or all
    if not len(args) == 12:
        print('An invalid number of arguments were given.')
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor submission of multiple files')
        return

    #get arguements from command line input independent of inut order
    sub_info = {
        'file_name': '',
        'ncores': '',
        'memory': '',
        'time': '',
        'program': '',
        'account': '',
    }
    
    #filename or all
    if len(args) > 2:
        sub_info['file_name'] = args[1]
    
    for i in range(2, len(args), 2):  #Start from index 3 (to skip 'submit' and 'file_name') and loop in increments of two
        if i+1 < len(args):  #Ensure there's a value following the option -letter option
            if args[i] == '-n':
                sub_info['ncores'] = args[i + 1]
            elif args[i] == '-m':
                sub_info['memory'] = args[i + 1]
            elif args[i] == '-t':
                sub_info['time'] = args[i + 1]
            elif args[i] == '-p':
                sub_info['program'] = args[i + 1]
            elif args[i] == '-a':
                sub_info['account'] = args[i + 1]

    #If an incorrect number of arguements are given, show the user the correct form of the input
    if any(value == '' for value in sub_info.values()):
        #List the missing items for the user
        missing_items = [key for key, value in sub_info.items() if value == '']
        print(f"Arguments are missing from the input: {', '.join(missing_items)}\n")
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor submission of multiple files')
        return

    #check if method is recognized
    if not sub_info['program'] in ['g16', 'python', 'orca']:
        print(f"The program argument (-p) provided: {sub_info['program']} is not an accepted value. It must be one of: 'g16', 'py', or 'orca'.")
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #days-#hours:#min -p g16/python/orca -a def/rrg\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #days-#hours:#min -p g16/python/orca -a def/rrg\nfor submission of multiple files')
        return
    
    #check for correct syntax for ncores and memory (they must be integers!)
    mem_str = sub_info['memory']
    #Function to check if a string represents an integer
    def is_integer(s):
        try:
            int(s)
            return True
        except ValueError:
            return False

    #Check if ncores is an integer
    if not is_integer(sub_info['ncores']):
        print(f'The number of cores provided is not an integer: {sub_info["ncores"]}')
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor submission of multiple files')
        return
    
    #check if memory ends with mb
    elif not mem_str.endswith('mb'):
        print(f'The memory specified the "mb" suffix: {mem_str}')
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor submission of multiple files')
        return

    #check if memory is an integer
    if not is_integer(mem_str[:-2]):
        print(f'The memory specified is not an integer: {mem_str}')
        print('Usage: subSLURM file_name.gjf -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor single file submissions, or:\nsubSLURM all -n #-m ####mb -t #d-#h:#m -p g16/python/orca -a def/rrg\nfor submission of multiple files')
        return

    #Function to check the time format
    def valid_time_format(time_str):
        #This regex matches a string format #-#:#where each #is one or two digits. If it matches, return true. If no match, false. 
        pattern = re.compile(r'^\d{1,2}-\d{1,2}:\d{1,2}$')
        return bool(pattern.match(time_str))

    if not valid_time_format(sub_info['time']):
        print(f'The time was not provided in the correct format: {sub_info["time"]}.\nValid format is #-#:#or ##-##:##. Each ##is one or two integers with the ordering days-hours:min')
        return
    
    job_files = [] #list to store files to submit via SLURM
    extension_map = {'g16': '.gjf', 'python': '.py', 'orca': '.inp'} #dictionary of file extensions based on program arguement input

    #workflow for submitting all jobs with the matching extension in the cwd
    if sub_info['file_name'] == 'all':
        
        job_extension = extension_map.get(sub_info['program'], None)
        job_files = [f for f in os.listdir(os.getcwd()) if f.lower().endswith(job_extension)]
    
    #workflow for submitting a single file provided as the second argument
    if sub_info['file_name'].endswith(extension_map[sub_info["program"]]):
        
        if os.path.isfile(os.path.join(os.getcwd(), sys.argv[1])): #because I lower the arguements at the start of main(), I call using sys.argv to get the right case of the filename
            job_files.append(sys.argv[1])
        
        else:
            print(f'{sys.argv[1]} does not exist in {os.getcwd()}.')
            return        
    else:
        print(f'{sys.argv[1]} does is not the right file type for a calculating in {sub_info["program"]}.')
        return

    #make .sh files for all appropriate files in the current directory where files are located
    for job_file in job_files:
        directory = os.path.dirname(job_file)
        submit_file(directory, job_file, sub_info)

if __name__ == '__main__':
    main()
